= Learn Spring Cloud

== Description

This is where I explore Spring Cloud technologies.

== Current modules

=== Stringmaster

A small service with simple string operations.
Exposes a REST API.

=== Numbermaster

A small service with simple number operations.
Exposes a REST API

=== Discover

Eureka server

=== Gateway
Custom gateway.
Routes the stringmaster and numbermaster services.

=== Gateway-Zuul
Zuul gateway.
Routes the stringmaster and numbermaster services.

=== Gateway-spring

Routes the stringmaster and numbermaster services.

==== Routing
If for instance the numbermaster service is running on localhost:8081 then the call http://localhost:8081/numbermaster/square/4 will return 16.
If Gateway is running on localhost:8092 then the call localhost:8092/numbermaster/square/4 will redirect to localhost:8081 and also return 16.
If Gateway-Zuul is running on localhost:8090 then the call localhost:8090/nmaster/numbermaster/square/4 will redirect to localhost:8081 and also return 16.

=== KnockKnockJokester and KnockKnockJokeListener
Must have a rabbitmq server running on 5672.
Jokester and JokeListener are two modules which communicate asynchronously using rabbitmq.
Jokester must be started first since it declares two queues which are needed.

There is a knockknockmodel module used by both modules.
Jokester sends through one channel and received through another.
Listener uses the same channels but sends messages vice versa.
It responds to the channel Jokester listens to and listens to the one Jokester responds to.

Jokester also has a JokeHolder which reads a JSON file with a number of Knock Knock jokes, including their setup and punchlines.

The Jokester starts by scheduling a starting message which just says "Knock Knock".
The Listener responds with "Knock Knock, Who's there".
The Jokester now picks a joke at random and sends "Knock Knock, Who's there, *SETUP*".
The Listener then responds with "Knock Knock, Who's there, *SETUP*, *SETUP* who".
Finally the Jokester responds "Knock Knock, Who's there, *SETUP*, *SETUP* who, *PUNCHLINE*" using the same joke which was used for the setup.
After receiving the final joke the Listener writes it out in a file.

The Joke stage is followed through the entire process.

== Future improvements
Make KnockKnock Jokester and Listener more configurable (for instance joke output, queue setup, rate of jokes, ...).